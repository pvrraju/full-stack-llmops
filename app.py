"""
app.py
======
Streamlit front-end that interacts with the FastAPI backend (`main.py`).  This
UI is intentionally simple—just an input box and a Markdown output—but gives you
a complete full-stack demo to iterate on.

How it works
------------
1. User types a question (e.g. “Plan a 5-day trip to Goa”).
2. We POST the text to `http://localhost:8000/query`.
3. The backend returns a Markdown-formatted travel plan which we render in the
   Streamlit page.

Customisation ideas
-------------------
• **Change endpoints** – edit `BASE_URL`.
• **Add file download button** – call `utils.save_info_document.save_document`.
• **Collect structured parameters** – replace the free-text input with
  dedicated widgets (date pickers, sliders, etc.) then concatenate the prompt.

Run locally
-----------
```
streamlit run app.py
```
"""
import streamlit as st
import requests
import datetime


import sys

BASE_URL = "http://localhost:8000"  # Backend endpoint

st.set_page_config(
    page_title="🌍 Travel Planner Agentic Application",
    page_icon="🌍",
    layout="centered",
    initial_sidebar_state="expanded",
)

st.title("🌍 Travel Planner Agentic Application")


if "messages" not in st.session_state:
    st.session_state.messages = []


st.header("How can I help you in planning a trip? Let me know where do you want to visit.")


with st.form(key="query_form", clear_on_submit=True):
    user_input = st.text_input("User Input", placeholder="e.g. Plan a trip to Goa for 5 days")
    submit_button = st.form_submit_button("Send")

if submit_button and user_input.strip():
    try:

        with st.spinner("Bot is thinking..."):
            payload = {"question": user_input}
            response = requests.post(f"{BASE_URL}/query", json=payload)

        if response.status_code == 200:
            answer = response.json().get("answer", "No answer returned.")
            markdown_content = f"""# 🌍 AI Travel Plan

            # **Generated:** {datetime.datetime.now().strftime('%Y-%m-%d at %H:%M')}  
            # **Created by:** Atriyo's Travel Agent

            ---

            {answer}

            ---

            *This travel plan was generated by AI. Please verify all information, especially prices, operating hours, and travel requirements before your trip.*
            """
            st.markdown(markdown_content)
        else:
            st.error(" Bot failed to respond: " + response.text)

    except Exception as e:
        raise f"The response failed due to {e}"